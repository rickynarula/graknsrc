1) Grakn doesn't support value ranges, so there is information loss when migrating an OWL data type to Grakn. Moreover, OWL supports a much wider range of data types, XML Schema data types, the OWL rational numbers etc., which Grakn at the moment does not support.

2) The naming of OWL properties often reflects the asymmetric way OWL statements are serialized in text formats. For example, "order1 hasItem item1", order1 is the subject, hasItems the predicate and item1 the object. The name of the object property 'hasItem' is chosen so that it reads well when in the <subject predicate object> format. In Grakn, relationships are specified with role players where the order doesn't matter. The OWL-Grakn migration cannot automatically derive a relationship name that reflects that. In this case, it could be 'order-item' for example. It is recommended to a user to manually define a naming map for object properties especially.

3) There is no distinction in Grakn b/w logical and non-logical assertions. Therefore, OWL annotations are simply treated as Grakn resources, the same way OWL data properties are.

4) When the range of a data property in OWL can be specifically identified to be a boolean or an integral value or a floating numeric value, is mapped as such to the Grakn data type. All other OWL data properties are mapped to the Grakn Data.STRING datatype.

5) Grakn supports only one EntityType per Entity instance. Given an OWL individual, the migration component will try to find an OWL class declaration for that individual where a specific, named class is declared. If it finds one, any one, it will use. But any other classifications will be ignored. Eventually as Grakn inference matures, full OWL classifications could be supported via Grakn relations (i.e. use Grakn relations to state all of an entity's types rather than a single, and maybe migration might be smart in picking the most specific, named one to declare as *the* official type in the Grakn graph).

6) Complex domains and range for object properties (i.e. class expressions) are not supported - in fact they are ignored. A way to support them would be to automatically create names for those domains and ranges and then augment the ontology with constraint/validation rules. This can be done once Grakn has support for such rules.

7) As with individual classification, object property ranges are not supporte in their full complexity. If an object property domain or range are simply declared as named classes, they will be used. Otherwise, the role types generated for subject and object will accept any players.

8) In OWL multiple values of the same property can be associated with an individual. For example, an individual may have multiple names, or phone numbers, all declare with the same OWL data property. Grakn however allows only one relation instance with given role players and since a resource is associated with an entity via a relation where the resource type correponds to a single role player, only one resource value per entity is possible.